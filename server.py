import threading
import time
import sys
import urllib.request
from socket import timeout
from urllib.error import URLError

sys.path.append('commands')

from flask import Flask, request

import commandhandler
from static import config
import speakermanager
import party
from static import speakerOn

app = Flask(__name__)


@app.route('/', methods=["POST"])
def hello():
    """
    ~ Receives the command from the player and then sends it to the speaker ~
    Takes the values of the body of the SMS message (and from who it was to/from)
    and uses uses the command handler to send commands to the speaker

    """
    smsmessage = request.values["Body"]
    smsmessage = smsmessage.lower()
    smssender = request.values["From"]

    print('Received text from ' + smssender)

    msgfrag = smsmessage.split(' ', 1)
    command = msgfrag[0]
    message = ""
    if len(msgfrag) == 2:
        message = msgfrag[1].strip() or ""
    commandhandler.handle(command, message, smssender)

    return ""

def runapp(debug):
    # If validatestatus checks to see the speaker is on, then it runs the app
    validatestatus()
    app.run(debug=debug)

def queue():
    """
    ~ The Queue that contains song
    Queue is generated by players sending songs to the speaker through Twilio API
    Plays the song that first enters the queue after one second
    """
    while True:
        while speakermanager.isPlaying() and not speakermanager.forceSkip:
            #print(speakermanager.forceSkip)
            time.sleep(1)
        party.playNextSong()

def validatestatus():
    """
    ~ Validates the status of the speaker ~
    Checks to see if the speaker is on and if it is playing a song
    """
    global speakerOn
    try:
        speakerOn = urllib.request.urlopen(config['speaker']['speakerAddress'] + "now_playing").read().decode("UTF-8")\
                        .find("STANDBY") == -1
    except URLError:
        speakerOn = False
    if not speakerOn:
        speakermanager.simulateKeyPress("POWER")
        speakermanager.clear()
    print("Speaker status: " + str(speakerOn))


if __name__ == '__main__':
    debug = config['DEFAULT']['debug'] == 'yes'
    thread = threading.Thread(target=runapp, args=(debug,))
    thread.daemon = True
    thread.start()

    queueThread = threading.Thread(target=queue, args=())
    queueThread.daemon = True
    queueThread.start()

    thread.join()
